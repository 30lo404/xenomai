<<<<<<< HEAD
config XENO_OPT_NUCLEUS
	depends on XENOMAI
	tristate "Nucleus"
	default y
	select IPIPE_LEGACY if IPIPE_CORE
	select XENO_OPT_PIPELINE_HEAD if IPIPE_CORE

if XENO_OPT_NUCLEUS != n

config XENO_OPT_PRIOCPL
	bool "Priority coupling support"
	default y
	help

	This option builds in the priority coupling support between
	Xenomai and Linux schedulers. Coupling priority makes the
	Linux kernel - as a whole - inherit the Xenomai-defined
	priority for a real-time thread running in user-space, when it
	enters the secondary execution mode, e.g. to perform regular
	Linux system calls.

	The net effect is that a user-space Xenomai thread which
	executes under the control of the Linux scheduler would still
	keep its priority in the Xenomai scheduler, and as such, would
	still run before any real-time thread having a lower priority,
	regardless of the execution mode of the latter (i.e. primary
	or secondary).

	Conversely, decoupling priority causes any user-space Xenomai
	thread which executes under the control of the Linux scheduler
	to always have a lower priority than any runnable real-time
	thread left under the control of the Xenomai scheduler
	(i.e. in primary mode), and as such, it will be scheduled
	after.

	Priority coupling can also be switched on/off dynamically on a
	thread-by-thread basis, provided this option enables the
	support globally. Otherwise, no priority coupling will ever
	occur.

	If in doubt, say Y.

config XENO_OPT_SCHED_CLASSES
	bool "Extra scheduling classes"
	default n
	help

	Xenomai implements a set of scheduling classes.  Each
	scheduling class defines its own set of rules for determining
	when and how to select a new thread to run.

	The Xenomai core has a built-in real-time class, which
	supports both preemptive fixed- priority FIFO scheduling, and
	round-robin scheduling.

	Enabling this option will allow you to select additional
	scheduling classes to compile in.

	If in doubt, say N.

config XENO_OPT_SCHED_TP
	bool "Temporal partitioning"
	default n
	depends on XENO_OPT_SCHED_CLASSES
	help

	This option enables support for temporal partitioning.

	If in doubt, say N.

config XENO_OPT_SCHED_TP_NRPART
	int "Number of partitions"
	default 4
	range 1 1024
	depends on XENO_OPT_SCHED_TP
	help

	Define here the maximum number of temporal partitions the TP
	scheduler may have to handle.

config XENO_OPT_SCHED_SPORADIC
	bool "Sporadic scheduling"
	default n
	depends on XENO_OPT_SCHED_CLASSES
	help

	This option enables support for the sporadic scheduling.  It
	can be used to enforce a capped limit on the execution time of
	a thread within a given period of time.

	If in doubt, say N.

config XENO_OPT_SCHED_SPORADIC_MAXREPL
	int "Maximum number of pending replenishments"
	default 8
	range 4 16
	depends on XENO_OPT_SCHED_SPORADIC
	help

	For performance reason, the budget replenishment information
	is statically stored on a per-thread basis. This parameter
	defines the maximum number of replenishment requests that can
	be pending concurrently for any given thread that undergoes
	sporadic scheduling (system minimum is 4).

config XENO_OPT_PIPE
	bool

config XENO_OPT_MAP
	bool

config XENO_OPT_VFILE
       bool
       depends on PROC_FS
       default y

config XENO_OPT_PIPE_NRDEV
	int "Number of pipe devices"
	depends on XENO_OPT_PIPE
	default 32
	help

	Message pipes are bi-directional FIFO communication
	channels allowing data exchange between real-time kernel
	threads and regular user-space processes. Pipes natively
	preserve message boundaries, but can also be used in byte
	streaming mode from kernel to user-space.

	This option sets the maximum number of pipe devices supported
	in the system. Pipe devices are named /dev/rtpN where N is a
	device minor number ranging from 0 to XENO_OPT_PIPE_NRDEV - 1.

config XENO_OPT_REGISTRY_NRSLOTS
	int "Number of registry slots"
	default 512
	help

	The registry is used by Xenomai skins to bind real-time
	objects they create to symbolic names, so that these objects
	can be further retrieved and shared by real-time applications
	regardless of their runtime space (i.e. kernel or user). Each
	named object occupies a registry slot.

	This option sets the maximum number of real-time objects the
	registry can handle. All skins using the registry share this
	storage.

config XENO_OPT_SYS_HEAPSZ
	int "Size of the system heap (Kb)"
	default 256
	help

	The system heap is used for various internal allocations by
	the nucleus and the real-time skins. The size is expressed in
	Kilobytes.

config XENO_OPT_SYS_STACKPOOLSZ
	depends on XENO_GENERIC_STACKPOOL
	int "Size of the private stack pool (Kb)"
	default 128
	help

	On this architecture, kernel-based Xenomai threads get the
	stack space they need from a private memory pool.  If you
	don't start any kernel-based thread (i.e. no RTDM driver
	thread, no real-time task created from an application embodied
	into a kernel module, no switchtest driver), you may leave a
	zero value for this option. The size is expressed in Kilobytes.

if !XENO_GENERIC_STACKPOOL
config XENO_OPT_SYS_STACKPOOLSZ
	int
	default 0
endif

config XENO_OPT_SEM_HEAPSZ
	int "Size of private semaphores heap (Kb)"
	default 12
	help

	Xenomai implementation of user-space semaphores relies on heaps
	shared between kernel and user-space. This configuration entry
	allow to set the size of the heap used for private semaphores.

	Note that each semaphore will allocate 4 bytes on 32 bits
	architectures or 8 bytes on 64 bits architectures of memory, so,
	the default of 12 Kb allows creating many semaphores.

config XENO_OPT_GLOBAL_SEM_HEAPSZ
	int "Size of global semaphores heap (Kb)"
	default 12
	help

	Xenomai implementation of user-space semaphores relies on heaps
	shared between kernel and user-space. This configuration entry
	allow to set the size of the heap used for semaphores shared
	between several processes.

	Note that each semaphore will allocate 4 bytes on 32 bits
	architectures or 8 bytes on 64 bits architectures of memory, so,
	the default of 12 Kb allows creating many semaphores.

config XENO_OPT_STATS
	bool "Statistics collection"
	depends on XENO_OPT_VFILE
	default y
	help

	This option causes the real-time nucleus to collect various
	per-thread runtime statistics, which are accessible through
	the /proc/xenomai/sched/stat interface.

config XENO_OPT_DEBUG
        depends on XENO_OPT_VFILE
	bool "Debug support"
	default y
	help

	When enabled, various debugging features can be switched on. They
	can help to find problems in applications, drivers, and the Xenomai
	core. XENO_OPT_DEBUG itself does not have any impact on generated
	code.

config XENO_OPT_DEBUG_NUCLEUS
	bool "Nucleus Debugging support"
	depends on XENO_OPT_DEBUG
	help
=======
>>>>>>> posix: rename as the cobalt interface

<<<<<<< HEAD
	This option activates various debugging checks inside the core
	system. Doing so adds a significant runtime overhead,
	worsening the latency figures especially on SMP kernels.
	Do not switch this option on unless you really know what you
	are doing.

config XENO_OPT_DEBUG_XNLOCK
	bool "Spinlocks Debugging support"
	depends on XENO_OPT_DEBUG
	default y if SMP
	help

	This option activates measurements of Xenomai spinlocks
	spinning time and duration. It should have a low overhad, and
	helps finding latency spots due to masking
	sections. Statistics about the longest masking section may be
	found in /proc/xenomai/lock.

config XENO_OPT_DEBUG_QUEUES
	bool "Queue Debugging support"
	depends on XENO_OPT_DEBUG
	help

	This option activates debugging checks for all queueing
	operations of the Xenomai core. It adds heavy runtime overhead,
	use with care.

config XENO_OPT_DEBUG_REGISTRY
	bool "Registry Debugging support"
	depends on XENO_OPT_DEBUG
	help

	This option activates debugging output for key registry
	operations performed by the Xenomai core. This option is
	useful to detect the source of object naming conflicts.

config XENO_OPT_DEBUG_TIMERS
	bool "Timer Debugging support"
	depends on XENO_OPT_DEBUG
	help

	This option activates debugging output for critical
	timer-related operations performed by the Xenomai core.

config XENO_OPT_DEBUG_SYNCH_RELAX
	bool "Detect mutexes held in relaxed sections"
	depends on XENO_OPT_DEBUG
	default y
	help

	This option detects situations where a real-time thread
	attempts to sleep on a Xenomai mutex object, that is owned by
	another thread currently running in secondary mode (i.e. plain
	Linux execution mode). The SIGDEBUG signal may be sent in such
	a case to the sleeper, provided the WARNSW flag is enabled for
	it, as set by e.g. rt_task_set_mode() or pthread_set_mode_np().

	This particular situation is a possible source of unwanted
	latency, since the current mutex owner may be unexpectedly
	delayed as a result of using non-deterministic Linux services,
	thus deferring the release of the mutex object for too long.

	This option may introduce some overhead in case mutexes are
	highly contended. Use this feature for debugging purposes
	only.

	NOTE: only Xenomai synchronization objects that may be
	actually "owned" by a single thread at a time, can be
	monitored this way (typically, mutexes).

config XENO_OPT_DEBUG_TRACE_RELAX
	bool "Trace relax requests"
	depends on XENO_OPT_DEBUG
	help

	This option enables recording of unwanted relax requests from
	user-space applications leaving the real-time domain, logging
	the thread information and code location involved. All records
	are readable from /proc/xenomai/debug/relaxes, and can be
	decoded using the "slackspot" utility.

config XENO_OPT_WATCHDOG
	bool "Watchdog support"
	depends on XENO_OPT_DEBUG
=======
menuconfig XENO_SKIN_POSIX
	depends on XENOMAI
	bool "POSIX API"
>>>>>>> posix: rename as the cobalt interface
	default y
	help

	A POSIX-compliant skin.

if XENO_SKIN_POSIX

config XENO_OPT_POSIX_PERIOD
	int "Base period (us)" if XENO_OPT_TIMING_PERIODIC
	default 0
	help
	Duration of the base periodic tick (in microseconds).

	The POSIX skin can express all delays and timeouts either as
	counts of ticks (i.e. jiffy-based), or directly in
	nanoseconds in a tick-less fashion. This paramater defines the
	duration of the base period in microseconds; a null value
	selects the tick-less mode.

	The base period can be overriden at runtime using the
	"tick_arg" module parameter when loading the POSIX skin.

	If in doubt, leave zero in this field.

config XENO_OPT_POSIX_SHM
	bool "Shared memory"
	help

	POSIX skin shared memory areas are regions of memory which can be shared
	between kernel-space and user-space, or used to share synchronization
	objects between kernel-space and user-space.

	If you do not intend to use Xenomai POSIX skin in kernel-space (and
	using the RTDM skin is the preferred way of implementing drivers), leave
	this option unselected.

<<<<<<< HEAD
	Use a binary heap. This data structure is efficient when a
	high number of software timers may be concurrently
	outstanding at any point in time.

config XENO_OPT_TIMER_WHEEL
	bool "Hash"
	help

	Use a hash table. Timers operations using this data structure
	should have an O(1) complexity if the timers follow two
	conditions:
	- timers expiration dates do not collide too much;
	- there is at least one periodic timer using a period near
	the wheel step (around 100000 ns by default).

endchoice
=======
if XENO_SKIN_RTDM = m
	comment "Note: Support for select is not available"
	comment "if the RTDM skin is compiled as a module."
endif
>>>>>>> posix: rename as the cobalt interface

config XENO_OPT_POSIX_SELECT
	bool "Select syscall"
	select XENO_OPT_SELECT
	depends on XENO_SKIN_RTDM != m
	help

	This option allows applications using the Xenomai POSIX skin
	in user-space to use the "select" syscall with Xenomai POSIX
	skin file descriptors.

config XENO_OPT_DEBUG_POSIX
	bool "Debugging support"
	default n
	help

<<<<<<< HEAD
	Set the duration in ns of a timer wheel step. At each step,
	the timer wheel use the next hash bucket.

endmenu
=======
	When enabled, this option makes the skin warn about not properly
	cleaned up POSIX objects it detects on process termination.
>>>>>>> posix: rename as the cobalt interface

endif
